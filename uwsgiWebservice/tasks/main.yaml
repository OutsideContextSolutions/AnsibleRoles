- fail:
    msg: There doesn't appear to be any ssl crtificates available. You can enable the `selfSignedCert` role, or install letsencrypt.
  when: not ssl_certificate and not ssl_certificate_key

- name: Create the {{user}} user.
  become: True
  user:
    name: "{{user}}"
    generate_ssh_key: True
    shell: /bin/bash
    system: True

- name: Cat public key for {{user}}
  become: True
  become_user: "{{user}}"
  command: "/bin/cat ~/.ssh/id_rsa.pub"
  register: pubkeys

- name: Print pubkeys for {{user}}
  debug: 
    msg: "{{ pubkeys.stdout | quote }}"

- name: Pull the repo at {{repo}}
  become: True
  become_user: "{{user}}"
  git:
    depth: 1
    repo: '{{repo}}'
    dest: "~/{{domain}}"
    key_file: "~/.ssh/id_rsa"
    update: True
    force: True
    accept_hostkey: True
    version: "{{branch}}"

- name: Generate a random password for our database user
  shell: < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo -n;
  register: dbPasswordCommand

- name: create {{dbName}} postgres database
  become: True
  become_user: "postgres"
  postgresql_db:
    name: "{{dbName}}"

- name: give access to {{dbUser}} on {{dbName}}
  become: True
  become_user: "postgres"
  postgresql_user:
    db: "{{dbName}}"
    name: "{{dbUser}}"
    password: "{{dbPasswordCommand.stdout}}"
    encrypted: True
    priv: ALL

- name: Render templates
  with_items: "{{ templates }}"
  template:
    src: /home/{{user}}/{{domain}}/{{item.source}}
    dest: /home/{{user}}/{{domain}}/{{item.destination}}
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0644

- name: Create a virtualenv at ~/{{domain}}-venv/ and install repository requirements.txt
  become: True
  become_user: "{{user}}"
  pip:
    extra_args: --no-cache-dir
    requirements: ~/{{domain}}/{{requirements}}
    virtualenv: ~/{{domain}}-venv/
    virtualenv_command: "{{virtualenv_command}}"

- name: Create a uwsgi config for {{domain}}
  template:
    src: uwsgi.jinja2.ini
    dest: "/etc/uwsgi/apps-available/{{domain}}.ini"
    owner: root
    group: root
    mode: 0644
- name: Enable config at /etc/uwsgi/apps-available/{{domain}}.ini
  file:
    src: /etc/uwsgi/apps-available/{{domain}}.ini
    dest: /etc/uwsgi/apps-enabled/{{domain}}.ini
    owner: root
    group: root
    state: link

- name: Create an nginx config for {{domain}}
  template:
    src: nginx.jinja2.conf
    dest: "/etc/nginx/sites-available/{{domain}}.conf"
    owner: root
    group: root
    mode: 0644

- name: Enable config at /etc/nginx/sites-available/{{domain}}.conf
  file:
    src: /etc/nginx/sites-available/{{domain}}.conf
    dest: /etc/nginx/sites-enabled/{{domain}}.conf
    owner: root
    group: root
    state: link

- name: Configure django
  when: django
  include: django.yaml
